name: Build and Publish Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lanshare

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test image
      run: |
        # 直接使用构建和推送后的本地镜像
        IMAGE_NAME="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
        IMAGE_NAME_LOWER=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
        IMAGE_TAG="${IMAGE_NAME_LOWER}:latest"
        
        echo "Testing image: $IMAGE_TAG"
        
        # 检查本地镜像
        echo "Available local images:"
        docker images | grep lanshare || echo "No lanshare images found"
        
        # 检查镜像是否存在
        if ! docker image inspect $IMAGE_TAG > /dev/null 2>&1; then
          echo "Image not found locally, trying with tag from this build"
          # 使用当前构建的标签
          IMAGE_TAG="${IMAGE_NAME_LOWER}:${{ github.ref_name }}"
          echo "Trying tag: $IMAGE_TAG"
        fi
        
        # 确保镜像存在
        if ! docker image inspect $IMAGE_TAG > /dev/null 2>&1; then
          echo "Still no image found, checking Docker Hub"
          # 从Docker Hub拉取
          docker pull $IMAGE_TAG
        fi
        
        # 检查镜像详情
        docker inspect $IMAGE_TAG
        
        # 启动容器并等待服务就绪
        docker run -d -p 7070:7070 --name test $IMAGE_TAG
        
        # 检查容器状态
        echo "Container status:"
        docker ps -a
        
        # 等待容器启动并检查端口
        for i in {1..30}; do
          # 检查容器是否还在运行
          if ! docker ps | grep -q test; then
            echo "Container stopped unexpectedly"
            docker logs test
            docker rm test
            exit 1
          fi
          
          # 检查容器端口映射
          echo "Port mapping:"
          docker port test
          
          # 尝试连接服务
          if curl -f http://localhost:7070/health 2>/dev/null; then
            echo "Health check passed"
            docker stop test && docker rm test
            exit 0
          elif curl -f http://localhost:7070 2>/dev/null; then
            echo "Service is responding"
            docker stop test && docker rm test
            exit 0
          else
            echo "Waiting for service to start... ($i/30)"
            echo "Container logs:"
            docker logs test 2>/dev/null || true
            echo "---"
            sleep 2
          fi
        done
        
        echo "Service failed to start properly"
        echo "Final container logs:"
        docker logs test
        echo "Container status:"
        docker ps -a
        echo "Container info:"
        docker inspect test
        docker stop test && docker rm test
        exit 1